/******/ (() => { // webpackBootstrap
/*!***************************!*\
  !*** ./src/background.ts ***!
  \***************************/
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
// Clear previous session ID's.
chrome.runtime.onStartup.addListener(function () {
  console.log("[INFO] Browser opened CLEARING CACHE");
  chrome.storage.local.clear();
});
var popupOpenedBefore = false;
chrome.runtime.onMessage.addListener(/*#__PURE__*/function () {
  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(message, sender, sendResponse) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          console.log("[DEBUG BG] Mensaje recibido en background:", message);
          if (!(message.target !== "background")) {
            _context2.next = 4;
            break;
          }
          console.log("[DEBUG BG] Mensaje no dirigido a background, ignorando");
          return _context2.abrupt("return");
        case 4:
          _context2.prev = 4;
          _context2.t0 = message.type;
          _context2.next = _context2.t0 === "offscreen-wakeup" ? 8 : _context2.t0 === "create-offscreen" ? 18 : _context2.t0 === "check-first-popup-open" ? 39 : 42;
          break;
        case 8:
          console.log("[DEBUG BG] Solicitud de despertar offscreen recibida");
          _context2.next = 11;
          return createOffscreenDocument();
        case 11:
          if (!_context2.sent) {
            _context2.next = 16;
            break;
          }
          console.log("[DEBUG BG] Documento offscreen creado, esperando 500ms antes de enviar wakeup");
          // Agregar un pequeño delay para dar tiempo al documento offscreen a inicializarse
          setTimeout(function () {
            console.log("[DEBUG BG] Enviando wakeup al documento offscreen");
            chrome.runtime.sendMessage({
              type: "offscreen-wakeup",
              target: "offscreen"
            })["catch"](function (err) {
              return console.log("[DEBUG BG] Error al enviar wakeup (esperado si offscreen aún no está listo):", err);
            });
          }, 500);
          _context2.next = 17;
          break;
        case 16:
          console.log("[DEBUG BG] Documento offscreen ya existe");
        case 17:
          return _context2.abrupt("break", 45);
        case 18:
          console.log("[DEBUG BG] Creando documento offscreen...");
          _context2.next = 21;
          return chrome.offscreen.hasDocument();
        case 21:
          if (_context2.sent) {
            _context2.next = 36;
            break;
          }
          console.log("[DEBUG BG] Documento offscreen no existe, creando...");
          _context2.prev = 23;
          _context2.next = 26;
          return chrome.offscreen.createDocument({
            url: "offscreen.html",
            reasons: [chrome.offscreen.Reason.AUDIO_PLAYBACK],
            justification: "Necesario para procesar audio de pestaña"
          });
        case 26:
          console.log("[DEBUG BG] Documento offscreen creado exitosamente");
          sendResponse({
            success: true
          });
          _context2.next = 34;
          break;
        case 30:
          _context2.prev = 30;
          _context2.t1 = _context2["catch"](23);
          console.error("[DEBUG BG] Error al crear documento offscreen:", _context2.t1);
          sendResponse({
            success: false,
            error: _context2.t1
          });
        case 34:
          _context2.next = 38;
          break;
        case 36:
          console.log("[DEBUG BG] Documento offscreen ya existe");
          sendResponse({
            success: true,
            exists: true
          });
        case 38:
          return _context2.abrupt("break", 45);
        case 39:
          console.log("[DEBUG BG] Verificando primera apertura del popup...");
          // Esta técnica evita el problema con mensajes asíncronos
          _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var hasDocument;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _context.next = 3;
                  return chrome.offscreen.hasDocument();
                case 3:
                  hasDocument = _context.sent;
                  console.log("[DEBUG BG] Estado de documento offscreen:", hasDocument);
                  if (!popupOpenedBefore && !hasDocument) {
                    console.log("[DEBUG BG] Primera apertura confirmada, enviando respuesta...");
                    popupOpenedBefore = true;

                    // En lugar de usar sendResponse, enviamos un mensaje de vuelta
                    chrome.runtime.sendMessage({
                      type: "first-open-response",
                      isFirstOpen: true
                    })["catch"](function (error) {
                      console.log("[DEBUG BG] Error enviando respuesta (esperado):", error);
                    });
                  } else {
                    console.log("[DEBUG BG] No es primera apertura, enviando respuesta...");

                    // En lugar de usar sendResponse, enviamos un mensaje de vuelta
                    chrome.runtime.sendMessage({
                      type: "first-open-response",
                      isFirstOpen: false
                    })["catch"](function (error) {
                      console.log("[DEBUG BG] Error enviando respuesta (esperado):", error);
                    });
                  }
                  _context.next = 12;
                  break;
                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](0);
                  console.error("[DEBUG BG] Error al verificar documento offscreen:", _context.t0);

                  // En caso de error, asumimos que no es primera apertura
                  chrome.runtime.sendMessage({
                    type: "first-open-response",
                    isFirstOpen: false,
                    error: true,
                    message: _context.t0.message || 'Error desconocido'
                  })["catch"](function (err) {
                    console.log("[DEBUG BG] Error enviando mensaje de error (esperado):", err);
                  });
                case 12:
                case "end":
                  return _context.stop();
              }
            }, _callee, null, [[0, 8]]);
          }))();
          // Mantenemos este return por compatibilidad
          return _context2.abrupt("return", true);
        case 42:
          console.log("[DEBUG BG] Mensaje no identificado:", message);
          sendResponse({
            success: false,
            error: "Mensaje no identificado"
          });
          return _context2.abrupt("break", 45);
        case 45:
          _context2.next = 51;
          break;
        case 47:
          _context2.prev = 47;
          _context2.t2 = _context2["catch"](4);
          console.error("[DEBUG BG] Error general en el listener:", _context2.t2);
          sendResponse({
            success: false,
            error: (_context2.t2 === null || _context2.t2 === void 0 ? void 0 : _context2.t2.message) || 'Error desconocido'
          });
        case 51:
          return _context2.abrupt("return", true);
        case 52:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[4, 47], [23, 30]]);
  }));
  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}());
function createOffscreenDocument() {
  return _createOffscreenDocument.apply(this, arguments);
}
function _createOffscreenDocument() {
  _createOffscreenDocument = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return chrome.offscreen.hasDocument();
        case 2:
          if (!_context3.sent) {
            _context3.next = 7;
            break;
          }
          console.log("Offscreen document already exists");
          return _context3.abrupt("return", false);
        case 7:
          console.log("Creating offscreen document");
          _context3.next = 10;
          return chrome.offscreen.createDocument({
            url: 'offscreen.html',
            reasons: ['USER_MEDIA'],
            justification: 'Adjust tab audio'
          });
        case 10:
          return _context3.abrupt("return", true);
        case 11:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _createOffscreenDocument.apply(this, arguments);
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,